{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\minih\\\\OneDrive\\\\Documents\\\\ING4\\\\Technologie web\\\\TP web\\\\PROJECT_WEB_OCRES\\\\frontend\\\\src\\\\components\\\\Graph.js\";\nimport React, { useState, useEffect } from 'react';\nimport { AreaChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport Select from 'react-select';\n\nfunction Graph() {\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [options, setOptions] = useState([]);\n  const [firstLabel, setFirstLable] = useState('FR');\n  const [secondLable, setSecondLable] = useState('ITALY');\n  const [firstSelect, setFirstSelect] = useState(129);\n  const [secondSelect, setSecondSelect] = useState(152);\n\n  const runCall = async () => {\n    let apiValue = await fetchData();\n    const header = apiValue.split('\\n').slice(0).map(line => line.split(','))[0].slice(4);\n    const firstPrep = apiValue.split('\\n').slice(0).map(line => line.split(','))[firstSelect];\n    const secondPrep = apiValue.split('\\n').slice(0).map(line => line.split(','))[secondSelect];\n    const firstLbl = firstPrep[1].toUpperCase();\n    const secondLbl = secondPrep[1].toUpperCase();\n    const chartData = [];\n\n    for (let i = 0; i < header.length; i++) {\n      const newRow = {};\n      newRow.name = header[i];\n      newRow[firstLbl] = parseInt(firstPrep[i]);\n      newRow[secondLbl] = parseInt(secondPrep[i]);\n      chartData.push(newRow);\n    }\n\n    const countriesList = apiValue.split('\\n').slice(1).map(line => line.split(',').slice(0, 2));\n    const countriesArr = [];\n\n    for (let i = 0; i < countriesList.length; i++) {\n      countriesArr.push({\n        label: countriesList[i].reverse().join(' : '),\n        value: i + 1\n      });\n    }\n\n    setFirstLable(firstLbl);\n    setSecondLable(secondLbl);\n    setOptions(countriesArr);\n    setData(chartData);\n    setIsLoading(false);\n    return null;\n  };\n\n  const fetchData = async () => {\n    const requestOption = {\n      method: \"GET\",\n      redirect: \"follow\"\n    };\n    const URL = `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv`;\n\n    try {\n      const response = await fetch(URL, requestOption);\n      return response.ok ? response.text() : null;\n    } catch (err) {\n      console.log(err);\n      return null;\n    }\n  };\n\n  useEffect(() => {\n    runCall();\n  }, [firstSelect, secondSelect]);\n\n  const firstInput = input => {\n    setFirstSelect(input.value);\n  };\n\n  const secondInput = input => {\n    setSecondSelect(input.value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }, \"loading...\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content-wrap\",\n    style: {\n      width: '100%',\n      height: '70%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(AreaChart, {\n    data: data,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: firstLabel,\n    stroke: \"#8884d8\",\n    activeDot: {\n      r: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: secondLable,\n    stroke: \"#87d110\",\n    activeDot: {\n      r: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"selector-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    options: options,\n    onChange: firstInput,\n    placeholder: \"FRANCE\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Select, {\n    options: options,\n    onChange: secondInput,\n    placeholder: \"ITALY\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 25\n    }\n  }))));\n}\n\nexport default Graph;","map":{"version":3,"sources":["C:/Users/minih/OneDrive/Documents/ING4/Technologie web/TP web/PROJECT_WEB_OCRES/frontend/src/components/Graph.js"],"names":["React","useState","useEffect","AreaChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Select","Graph","data","setData","isLoading","setIsLoading","options","setOptions","firstLabel","setFirstLable","secondLable","setSecondLable","firstSelect","setFirstSelect","secondSelect","setSecondSelect","runCall","apiValue","fetchData","header","split","slice","map","line","firstPrep","secondPrep","firstLbl","toUpperCase","secondLbl","chartData","i","length","newRow","name","parseInt","push","countriesList","countriesArr","label","reverse","join","value","requestOption","method","redirect","URL","response","fetch","ok","text","err","console","log","firstInput","input","secondInput","width","height","top","right","left","bottom","r"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react'\r\nimport {\r\n    AreaChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\r\n  } from 'recharts';\r\n  import Select from 'react-select';\r\n\r\n\r\nfunction Graph() {\r\n    const [data, setData] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [options, setOptions] = useState([])\r\n    const [firstLabel, setFirstLable] = useState('FR');\r\n    const [secondLable, setSecondLable] = useState('ITALY');\r\n    const [firstSelect, setFirstSelect] = useState(129);\r\n    const [secondSelect, setSecondSelect] = useState(152);\r\n\r\n        const runCall =async() => {\r\n            let apiValue = await fetchData();\r\n            const header = apiValue.split('\\n').slice(0).map(line => (line.split(',')))[0].slice(4);\r\n\r\n            const firstPrep = apiValue.split('\\n').slice(0).map(line => (line.split(',')))[firstSelect]\r\n            const secondPrep = apiValue.split('\\n').slice(0).map(line => (line.split(',')))[secondSelect]\r\n\r\n            const firstLbl = firstPrep[1].toUpperCase();\r\n            const secondLbl = secondPrep[1].toUpperCase();\r\n            \r\n            const chartData =[];\r\n            for (let i=0; i<header.length ; i++){\r\n                const newRow ={};\r\n                newRow.name = header[i];\r\n                newRow[firstLbl] = parseInt(firstPrep[i]);\r\n                newRow[secondLbl] = parseInt(secondPrep[i]);\r\n                chartData.push(newRow);\r\n            }\r\n            const countriesList = apiValue.split('\\n').slice(1).map(line => (line.split(',').slice(0, 2)));\r\n            const countriesArr = [];\r\n            for (let i = 0; i < countriesList.length; i++) {\r\n            countriesArr.push({ label: countriesList[i].reverse().join(' : '), value: i + 1 })\r\n            }\r\n\r\n            setFirstLable(firstLbl);\r\n            setSecondLable(secondLbl);\r\n            setOptions(countriesArr)\r\n            setData(chartData);\r\n            setIsLoading(false);\r\n            return null;\r\n        }\r\n        const fetchData = async() => {\r\n            const requestOption = {\r\n                method: \"GET\",\r\n                redirect: \"follow\"\r\n            }\r\n            const URL= `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv`\r\n\r\n            try {\r\n                const response = await fetch(URL,requestOption);\r\n                return response.ok ? response.text() : null\r\n            } catch (err) {\r\n                console.log(err);\r\n                return null;\r\n            }\r\n        }\r\n        useEffect(() => {\r\n            runCall();\r\n          }, [firstSelect, secondSelect])\r\n        \r\n          const firstInput = (input) => {\r\n            setFirstSelect(input.value)\r\n          }\r\n        \r\n          const secondInput = (input) => {\r\n            setSecondSelect(input.value)\r\n          }\r\n        return(\r\n            <div className=\"chart-wrapper\">\r\n                {isLoading ?\r\n                    <div>loading...</div> :\r\n                    <div className=\"content-wrap\" style={{ width: '100%', height: '70%' }}>\r\n                    <ResponsiveContainer>\r\n                    <AreaChart\r\n                        data={data}\r\n                        margin={{\r\n                            top: 5, right: 30, left: 20, bottom: 5,\r\n                        }}\r\n                    >\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"name\" />\r\n                        <YAxis />\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        <Line type=\"monotone\" dataKey={firstLabel} stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n                        <Line type=\"monotone\" dataKey={secondLable} stroke=\"#87d110\" activeDot={{ r: 8 }} />\r\n                    </AreaChart>\r\n                    </ResponsiveContainer>\r\n                    <div className=\"selector-wrap\">\r\n                        <Select options={options} onChange={firstInput} placeholder=\"FRANCE\" />\r\n                        <Select options={options} onChange={secondInput} placeholder=\"ITALY\" />\r\n                    </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    \r\n}export default Graph;"]},"metadata":{},"sourceType":"module"}