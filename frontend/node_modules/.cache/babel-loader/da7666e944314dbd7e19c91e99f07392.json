{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\minih\\\\OneDrive\\\\Documents\\\\ING4\\\\Technologie web\\\\TP web\\\\PROJECT_WEB_OCRES\\\\frontend\\\\src\\\\components\\\\Graph.js\";\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport Select from 'react-select';\n\nfunction Graph() {\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [options, setOptions] = useState([]);\n  const [firstLabel, setFirstLable] = useState('FR');\n  const [secondLable, setSecondLable] = useState('ITALY');\n  const [firstSelect, setFirstSelect] = useState(129);\n  const [secondSelect, setSecondSelect] = useState(138);\n  useEffect(() => {\n    const runCall = async () => {\n      let apiValue = await fetchData();\n      const header = apiValue.split('\\n').slice(0).map(line => line.split(','))[0].slice(4);\n      const firstPrep = apiValue.split('\\n').slice(0).map(line => line.split(','))[firstSelect];\n      const secondPrep = apiValue.split('\\n').slice(0).map(line => line.split(','))[secondSelect];\n      const firstLbl = firstPrep[1].toUpperCase();\n      const secondLbl = secondPrep[1].toUpperCase();\n      const chartData = [];\n\n      for (let i = 0; i < header.length; i++) {\n        const newRow = {};\n        newRow.name = header[i];\n        newRow[firstLbl] = parseInt(firstPrep[i]);\n        newRow[secondLbl] = parseInt(secondPrep[i]);\n        chartData.push(newRow);\n      }\n\n      const countriesList = apiValue.split('\\n').slice(1).map(line => line.split(',').slice(0, 2));\n      const countriesArr = [];\n\n      for (let i = 0; i < countriesList.length; i++) {\n        countriesArr.push({\n          label: countriesList[i].reverse().join(' : '),\n          value: i + 1\n        });\n      }\n\n      setFirstLable(firstLbl);\n      setSecondLable(secondLbl);\n      setOptions(countriesArr);\n      setData(chartData);\n      setIsLoading(false);\n      return null;\n    };\n\n    const fetchData = async () => {\n      const requestOption = {\n        method: \"GET\",\n        redirect: \"follow\"\n      };\n      const URL = `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv`;\n\n      try {\n        const response = await fetch(URL, requestOption);\n        return response.ok ? response.text() : null;\n      } catch (err) {\n        console.log(err);\n        return null;\n      }\n    };\n\n    useEffect(() => {\n      runCall();\n    }, [firstSelect, secondSelect]);\n\n    const firstInput = input => {\n      setFirstSelect(input.value);\n    };\n\n    const secondInput = input => {\n      setSecondSelect(input.value);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, \"loading...\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    width: 800,\n    height: 500,\n    data: props.data,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: props.label_1,\n    stroke: \"#8884d8\",\n    activeDot: {\n      r: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: props.label_2,\n    stroke: \"#87d110\",\n    activeDot: {\n      r: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"selector-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    options: options,\n    onChange: firstInput,\n    placeholder: \"US\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Select, {\n    options: options,\n    onChange: secondInput,\n    placeholder: \"ITALY\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 25\n    }\n  }))));\n}\n\nexport default Graph;","map":{"version":3,"sources":["C:/Users/minih/OneDrive/Documents/ING4/Technologie web/TP web/PROJECT_WEB_OCRES/frontend/src/components/Graph.js"],"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Select","Graph","data","setData","isLoading","setIsLoading","options","setOptions","firstLabel","setFirstLable","secondLable","setSecondLable","firstSelect","setFirstSelect","secondSelect","setSecondSelect","runCall","apiValue","fetchData","header","split","slice","map","line","firstPrep","secondPrep","firstLbl","toUpperCase","secondLbl","chartData","i","length","newRow","name","parseInt","push","countriesList","countriesArr","label","reverse","join","value","requestOption","method","redirect","URL","response","fetch","ok","text","err","console","log","firstInput","input","secondInput","props","top","right","left","bottom","label_1","r","label_2"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react'\r\nimport {\r\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n  } from 'recharts';\r\n  import Select from 'react-select';\r\n\r\n\r\nfunction Graph() {\r\n    const [data, setData] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [options, setOptions] = useState([])\r\n    const [firstLabel, setFirstLable] = useState('FR');\r\n    const [secondLable, setSecondLable] = useState('ITALY');\r\n    const [firstSelect, setFirstSelect] = useState(129);\r\n    const [secondSelect, setSecondSelect] = useState(138);\r\n\r\n    useEffect(() => {\r\n        const runCall =async() => {\r\n            let apiValue = await fetchData();\r\n            const header = apiValue.split('\\n').slice(0).map(line => (line.split(',')))[0].slice(4);\r\n\r\n            const firstPrep = apiValue.split('\\n').slice(0).map(line => (line.split(',')))[firstSelect]\r\n            const secondPrep = apiValue.split('\\n').slice(0).map(line => (line.split(',')))[secondSelect]\r\n\r\n            const firstLbl = firstPrep[1].toUpperCase();\r\n            const secondLbl = secondPrep[1].toUpperCase();\r\n            \r\n            const chartData =[];\r\n            for (let i=0; i<header.length ; i++){\r\n                const newRow ={};\r\n                newRow.name = header[i];\r\n                newRow[firstLbl] = parseInt(firstPrep[i]);\r\n                newRow[secondLbl] = parseInt(secondPrep[i]);\r\n                chartData.push(newRow);\r\n            }\r\n            const countriesList = apiValue.split('\\n').slice(1).map(line => (line.split(',').slice(0, 2)));\r\n            const countriesArr = [];\r\n            for (let i = 0; i < countriesList.length; i++) {\r\n            countriesArr.push({ label: countriesList[i].reverse().join(' : '), value: i + 1 })\r\n            }\r\n\r\n            setFirstLable(firstLbl);\r\n            setSecondLable(secondLbl);\r\n            setOptions(countriesArr)\r\n            setData(chartData);\r\n            setIsLoading(false);\r\n            return null;\r\n        }\r\n        const fetchData = async() => {\r\n            const requestOption = {\r\n                method: \"GET\",\r\n                redirect: \"follow\"\r\n            }\r\n            const URL= `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv`\r\n\r\n            try {\r\n                const response = await fetch(URL,requestOption);\r\n                return response.ok ? response.text() : null\r\n            } catch (err) {\r\n                console.log(err);\r\n                return null;\r\n            }\r\n        }\r\n        useEffect(() => {\r\n            runCall();\r\n          }, [firstSelect, secondSelect])\r\n        \r\n          const firstInput = (input) => {\r\n            setFirstSelect(input.value)\r\n          }\r\n        \r\n          const secondInput = (input) => {\r\n            setSecondSelect(input.value)\r\n          }\r\n    },[])\r\n        return(\r\n            <div className=\"chart-wrapper\">\r\n                {isLoading ?\r\n                    <div>loading...</div> :\r\n                    <div className=\"content-wrap\">\r\n                    <LineChart\r\n                        width={800}\r\n                        height={500}\r\n                        data={props.data}\r\n                        margin={{\r\n                            top: 5, right: 30, left: 20, bottom: 5,\r\n                        }}\r\n                    >\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"name\" />\r\n                        <YAxis />\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        <Line type=\"monotone\" dataKey={props.label_1} stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n                        <Line type=\"monotone\" dataKey={props.label_2} stroke=\"#87d110\" activeDot={{ r: 8 }} />\r\n                    </LineChart>\r\n                    <div className=\"selector-wrap\">\r\n                        <Select options={options} onChange={firstInput} placeholder=\"US\" />\r\n                        <Select options={options} onChange={secondInput} placeholder=\"ITALY\" />\r\n                    </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    \r\n}export default Graph;"]},"metadata":{},"sourceType":"module"}